#!/usr/bin/env python
#
# Run Script for nCoda
# Copyright 2016 Christopher Antila

import subprocess
import time

_PATH_TO_ELECTRON = 'julius/node_modules/.bin/electron'


def the_script():
    # hold the Popen instances
    subprocesses = []

    try:
        # start Fujian
        print('Starting Fujian.')
        try:
            subprocesses.append(subprocess.Popen(['venv/bin/python', '-m', 'fujian']))
        except subprocess.CalledProcessError as cperr:
            print('Encountered the following error while starting Fujian:\n{}'.format(cperr))
            raise SystemExit(1)

        # wait 1 second
        time.sleep(1)

        # see whether any of the subprocesses have crashed
        for proc in subprocesses:
            proc.poll()
            if proc.returncode is not None:
                print('\nERROR: One of the processes had a problem; devserver quitting!')
                raise SystemExit(1)

        # we'll catch KeyboardInterrupt so it doesn't look like an error
        try:
            subprocess.call([_PATH_TO_ELECTRON, 'julius'])
        except KeyboardInterrupt:
            print('')

    finally:
        for each_instance in subprocesses:
            # NB: in Python 3, this would raise ProcessLookupError
            try:
                each_instance.terminate()
                print('Terminated subprocess with PID {}'.format(each_instance.pid))
                each_instance.wait()
            except OSError as exc:
                # if it says "No such process" then it already quit, so we're fine
                if 'No such process' in exc.args[1]:
                    print('Process {} already exited'.format(each_instance.pid))
                else:
                    print('Could not terminate subprocess with PID {}'.format(each_instance.pid))


if '__main__' == __name__:
    the_script()
else:
    print('This script is only intended to be run from a commandline.')
